<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-06-19T22:55:51-07:00</updated><id>http://localhost:4000/</id><title type="html">Mark Wang’s Blog</title><subtitle>Tips and tricks for getting the max performance from your MySQL PostgreSQL Redshift databases.
</subtitle><entry><title type="html">Perform Hit of Using Temporary Tables</title><link href="http://localhost:4000/query/optimization/2017/06/19/performance-of-with-table-as.html" rel="alternate" type="text/html" title="Perform Hit of Using Temporary Tables" /><published>2017-06-19T16:00:00-07:00</published><updated>2017-06-19T16:00:00-07:00</updated><id>http://localhost:4000/query/optimization/2017/06/19/performance-of-with-table-as</id><content type="html" xml:base="http://localhost:4000/query/optimization/2017/06/19/performance-of-with-table-as.html">&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; Be very careful when using temp tables, especially when filtering against results from them. Performance using it seems very variable and can have up to 100x performance hits. If possible, compare your queries using temporary tables with hardcoded queries that don’t use them.&lt;/p&gt;

&lt;h3 id=&quot;filtering-on-with-table-as--performance&quot;&gt;Filtering on with table as … Performance&lt;/h3&gt;

&lt;p&gt;Pop quiz: We have a view &lt;code class=&quot;highlighter-rouge&quot;&gt;fact.user_tracking_view&lt;/code&gt; and with a sort key of &lt;code class=&quot;highlighter-rouge&quot;&gt;time_occurred_pst&lt;/code&gt;. Below are some queries that return how many events happened yesterday. Can you guess the relative performance of each?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- First Query&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yesterday&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;current_timestamp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;zone&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'PST8PDT'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1 day'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_tracking_view&lt;/span&gt; 
	&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_occurred_pst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yesterday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_occurred_pst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yesterday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1 day'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Second Query&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_tracking_view&lt;/span&gt; 
	&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_occurred_pst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;current_timestamp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;zone&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'PST8PDT'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1 day'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_occurred_pst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;current_timestamp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;zone&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'PST8PDT'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you’re familiar with Postgres/Redshift, you might think the first is slightly slower but justified with improved readability, like this &lt;a href=&quot;http://www.craigkerstiens.com/2013/11/18/best-postgres-feature-youre-not-using/&quot;&gt;blog post&lt;/a&gt; suggests. However, the &lt;strong&gt;second query is actually ~100x faster&lt;/strong&gt;. For my Redshift table, the first finishes in around 20 seconds, whereas the second query takes around 200 milliseconds. &lt;strong&gt;The performance hit is HUUUUUUUUUUUUUUUUUUUUUUUUGGGGGGGGGGGGGGGEEEEEEEEEEEEEEE.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;whats-the-deal&quot;&gt;What’s the deal?&lt;/h3&gt;

&lt;p&gt;Doing an explain query on both, the differences is the slower query has to scan through more rows. (&lt;code class=&quot;highlighter-rouge&quot;&gt;user_tracking_2017_05&lt;/code&gt; is an example of a table that makes up &lt;code class=&quot;highlighter-rouge&quot;&gt;fact.user_tracking_view&lt;/code&gt;.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;           
&lt;span class=&quot;c1&quot;&gt;-- Slower query explain path example&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;XN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scan&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_tracking_2017_05&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4351900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1087976&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_occurred_pst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'6 days'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_occurred_pst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'7 days'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Faster query explain path example&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;XN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subquery&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scan&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;*SELECT* 4&quot;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;02&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;XN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Aggregate&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;XN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scan&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_tracking_2017_05&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_occurred_pst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2017-06-11 00:00:00'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;without&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_occurred_pst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2017-06-12 00:00:00'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;without&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The differences in cost between &lt;code class=&quot;highlighter-rouge&quot;&gt;(cost=0.00..4351900.16 rows=1087976 width=8)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;(cost=0.01..0.02 rows=1 width=0)&lt;/code&gt; suggest that in the faster query is able to completely skip &lt;code class=&quot;highlighter-rouge&quot;&gt;user_tracking_2017_05&lt;/code&gt; since it has no records that satisfy the filter condition, whereas the slower faster still needs to examine 1087976 rows. Note that 1087976 is much less than the total count of &lt;code class=&quot;highlighter-rouge&quot;&gt;user_tracking_2017_05&lt;/code&gt; which is 217595067, so it’s probably scanning every block of presorted analyzed data.&lt;/p&gt;

&lt;p&gt;Looking carefully at the query, you can see the slower one’s filter condition is &lt;code class=&quot;highlighter-rouge&quot;&gt;((time_occurred_pst &amp;lt; ($0 - '6 days'::interval)) AND (time_occurred_pst &amp;gt; ($1 - '7 days'::interval)))&lt;/code&gt; whereas the faster query’s filter condition is &lt;code class=&quot;highlighter-rouge&quot;&gt;((time_occurred_pst &amp;gt; '2017-06-11 00:00:00'::timestamp without time zone) AND (time_occurred_pst &amp;lt; '2017-06-12 00:00:00'::timestamp without time zone))&lt;/code&gt; Note the slower has $0 and $1. Therefore, it seems like the &lt;strong&gt;faster query can optimize using the existing timestamp, whereas the slower query has to adhoc select from from the temporary table to compare to each data block.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, the lesson may be more general than just being careful using &lt;code class=&quot;highlighter-rouge&quot;&gt;with table as ...&lt;/code&gt;, it may be &lt;strong&gt;be careful filtering by selects from other tables when you can filter by hard coded values.&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">tl;dr: Be very careful when using temp tables, especially when filtering against results from them. Performance using it seems very variable and can have up to 100x performance hits. If possible, compare your queries using temporary tables with hardcoded queries that don’t use them.</summary></entry><entry><title type="html">Joda-Time Daylight Savings Time</title><link href="http://localhost:4000/joda-time/timezone/2017/05/17/joda-time-timezones.html" rel="alternate" type="text/html" title="Joda-Time Daylight Savings Time" /><published>2017-05-17T16:00:00-07:00</published><updated>2017-05-17T16:00:00-07:00</updated><id>http://localhost:4000/joda-time/timezone/2017/05/17/joda-time-timezones</id><content type="html" xml:base="http://localhost:4000/joda-time/timezone/2017/05/17/joda-time-timezones.html">&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; Be very careful when parsing DateTimeFormat with PST or PDT with &lt;code class=&quot;highlighter-rouge&quot;&gt;joda.time.DateTime&lt;/code&gt;. &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;joda.time.DateTime&lt;/code&gt; does not know the difference between PST/PDT when parsing a string.&lt;/strong&gt; In you can, use ‘ZZ’ (-08:00) instead of ‘zzz’ (PST). &lt;a href=&quot;http://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html&quot;&gt;Joda-Time Formats&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;daylight-savings-time&quot;&gt;Daylight Savings Time&lt;/h3&gt;

&lt;p&gt;Pop quiz: what’s the difference between PST and PDT (or EST vs EDT)? The answer is the first stands for Pacific &lt;em&gt;Standard&lt;/em&gt; Time, and the second stands for Pacific &lt;em&gt;Daylight&lt;/em&gt; Time. More concretely, PST is UTC-08:00 (UTC time minus 8 hours), whereas PDT is UTC-07:00 (UTC minus 7 hours).&lt;/p&gt;

&lt;h3 id=&quot;okay-so-pst-0800-are-interchangeable-in-joda-time&quot;&gt;Okay, so PST/-08:00 are interchangeable in Joda-Time?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;NOOOOOOOOOOO!!!!!!&lt;/strong&gt; Consider this following piece of code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.joda.time.*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DateTimeFormatter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTimeFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forPattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss.SSS zzz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sooner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1478420000000L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTimeZone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;America/Los_Angeles&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;later&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1478423000000L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTimeZone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;America/Los_Angeles&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;// sooner is &quot;2016-11-06 01:13:20.000-07:00&quot;, whereas later is &quot;2016-11-06 01:03:20.000-08:00&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Note that later has a lower time even though it is later since it just passed into daylight savings time.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;later&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAfter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sooner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What do you think the output is? Fortunately, it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;. So far, so good. However, look at what happens when you parse the string back into DateTime.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sooner_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sooner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dtf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;later_string&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;later&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dtf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// sooner_string = &quot;2016-11-06 01:13:20.000 PDT&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// later_string  = &quot;2016-11-06 01:03:20.000 PST&quot;&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sooner_parsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sooner_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;later_parsed&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;later_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  

&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;later_parsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAfter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sooner_parsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Surprisingly, the output is &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/strong&gt; It appears that even though Joda-Time recognizes the difference between PDT/PST when writing to string, it doesn’t recognize the difference when parsing the string back into DateTime. This is confirmed by&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdtMillis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2016-11-06 01:03:20.000 PDT&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMillis&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pstMillis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2016-11-06 01:03:20.000 PST&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMillis&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdtMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pstMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The output for both lines will be &lt;code class=&quot;highlighter-rouge&quot;&gt;1478430000000L&lt;/code&gt;. &lt;strong&gt;When parsing timezones, DateTime is indifferent to PST/PDT, even though those represent different offsets!&lt;/strong&gt; I haven’t tried this with out Daylights Savings Times like EST/EDT, but I imagine the effect is the same.&lt;/p&gt;

&lt;h3 id=&quot;so-does-that-mean-all-my-stringified-pst-times-are-invalid-when-parsed&quot;&gt;So does that mean all my stringified PST times are invalid when parsed?&lt;/h3&gt;

&lt;p&gt;Not necessarily. So while &lt;code class=&quot;highlighter-rouge&quot;&gt;joda.time.DateTime&lt;/code&gt; treats PST/PDT the same when parsing, it really shouldn’t affect any time except the one hour when it’s possible to overlap: it’s smart enough to know what you mean except for the one hour in the fall when daylight savings can &lt;a href=&quot;https://stackoverflow.com/tags/dst/info&quot;&gt;overlap&lt;/a&gt;. However, if you have records that require/record precise timing, it may cause bugs during that hour.&lt;/p&gt;

&lt;h3 id=&quot;so-what-should-i-do&quot;&gt;So what should I do?&lt;/h3&gt;

&lt;p&gt;While Joda-Time seems to parse PDT/PST identically, it does not do the same for the underlying offsets -08:00/-07:00. So, my advice is to use numerical offsets, and only use human readable timezones when you have to show it to users.&lt;/p&gt;

&lt;h3 id=&quot;couldnt-all-of-this-complexity-been-avoided-by-just-using-datetime-objectunix-time&quot;&gt;Couldn’t all of this complexity been avoided by just using DateTime object/unix time?&lt;/h3&gt;

&lt;p&gt;Yes, excellent point: why even go through all this hassle of serializing DateTime to string and back? In my situation, I had to to write DateTime to s3, so I had to serialize the object, and human readable string seemed better to me than byte array. In addition, I wanted time zone information, so I didn’t want to use unix time. But in general, unnecessary serialization/confusing offsets should be avoided, precisely because it’s a source of bugs such as this.&lt;/p&gt;</content><author><name></name></author><summary type="html">tl;dr: Be very careful when parsing DateTimeFormat with PST or PDT with joda.time.DateTime. joda.time.DateTime does not know the difference between PST/PDT when parsing a string. In you can, use ‘ZZ’ (-08:00) instead of ‘zzz’ (PST). Joda-Time Formats</summary></entry><entry><title type="html">Timestamp Conversions in Looker</title><link href="http://localhost:4000/sql/looker/2017/04/26/timestamp-conversions-in-looker.html" rel="alternate" type="text/html" title="Timestamp Conversions in Looker" /><published>2017-04-26T16:00:00-07:00</published><updated>2017-04-26T16:00:00-07:00</updated><id>http://localhost:4000/sql/looker/2017/04/26/timestamp-conversions-in-looker</id><content type="html" xml:base="http://localhost:4000/sql/looker/2017/04/26/timestamp-conversions-in-looker.html">&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; If you’re using Looker and going to be filtering by timestamp/datetimes, definitely use timestamp instead of timestamptz. If you’re going to group by timestamp (ie, group by DATE(timestamp)), then it’s highly recommended the timestamp is stored in the same timezone as the user querying the data. To make sure there is no confusion, add an extra timestamptz column with the time as the source of time truth.&lt;/p&gt;

&lt;h3 id=&quot;timestamp-basics&quot;&gt;Timestamp Basics&lt;/h3&gt;

&lt;p&gt;If you’re like most developers I know, chances are you kind of know how timestamp/timestamptz in postgres works but not really. There are already some really good &lt;a href=&quot;http://phili.pe/posts/timestamps-and-time-zones-in-postgresql/&quot;&gt;blog posts&lt;/a&gt; on that subject. I did want to address one particular piece of advice: &lt;a href=&quot;http://justatheory.com/computers/databases/postgresql/use-timestamptz.html&quot;&gt;always use timestamptz&lt;/a&gt;. While I agree with it in general, I’ve found it’s bad advice if &lt;a href=&quot;https://looker.com/&quot;&gt;Looker&lt;/a&gt; is your BI tool.&lt;/p&gt;

&lt;p&gt;To explain, first a pop quiz: Assuming you have two identical tables, except one has an indexed &lt;a href=&quot;#note&quot;&gt;(1)&lt;/a&gt; timestamp column and one has an indexed timestamptz column. Which of the following queries will be faster?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_1&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2017-04-01'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_2&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamptz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2017-04-01'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Run against our view of 1.3 billion rows with 145 million rows that fit the where clause, the first query takes &lt;strong&gt;~0.5 seconds&lt;/strong&gt; whereas the second query takes &lt;strong&gt;~16 seconds&lt;/strong&gt;. The reason is because the index will be used in the first query, whereas in the second it won’t be because each timestamptz has to be converted to a timestamp first, leading to a sequential scan.&lt;/p&gt;

&lt;h3 id=&quot;great-what-does-that-have-to-do-with-looker&quot;&gt;Great, what does that have to do with Looker?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Looker has no concept of a timestamptz column.&lt;/strong&gt; Amazing, I know! We were so surprised we even opened a ticket to confirm, and that’s what they said. Basically, all time related filter queries are ran against timestamp (and not timestamptz). And as we’ve already shown, filtering by timestamp when your column is timestamptz leads to a slow query. Therefore, &lt;strong&gt;only expose timestamp columns in Looker for filtering.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;thanks-for-that-any-other-tips&quot;&gt;Thanks for that. Any other tips?&lt;/h3&gt;

&lt;p&gt;You bet! Looker has a &lt;a href=&quot;https://discourse.looker.com/t/timezone-conversion/159&quot;&gt;feature&lt;/a&gt; that automatically converts timestamps in a table to another timestamp in a different timezone. This &lt;em&gt;usually&lt;/em&gt; works fine, as the conversion &lt;em&gt;usually&lt;/em&gt; only happens once per query instead for every row. IE, you get&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;--This is good: only 1 CONVERT_TIMEZONE done per query.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_1&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONVERT_TIMEZONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'America/Los_Angeles'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UTC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2017-04-01'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;instead of&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;--This is bad: CONVERT_TIMEZONE done for every row.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_1&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONVERT_TIMEZONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'America/Los_Angeles'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UTC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2017-04-01'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, as my italicized &lt;em&gt;usually&lt;/em&gt; forshadows, &lt;strong&gt;there is an exception to this, which is when you do group by in your timestamp.&lt;/strong&gt; For example, if you want to get a count of the rows by date, the Looker generated query becomes&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;--BAD!!!! CONVERT_TIMEZONE done on every row.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CONVERT_TIMEZONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'America/Los_Angeles'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UTC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_1&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONVERT_TIMEZONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'America/Los_Angeles'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UTC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'::timestamp)
GROUP BY 1;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As we discussed earlier, this is bad. The difference between the above query and the below&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;--Good. No CONVERT_TIMEZONE done on every row.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_1&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'::timestamp
GROUP BY 1;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;was &lt;strong&gt;~15 seconds&lt;/strong&gt; for the first and &lt;strong&gt;~4 seconds&lt;/strong&gt; for the second. Therefore, &lt;strong&gt;if you’re going to do any group by for timestamps, seriously consider putting the timestamp in the same time zone as the user querying the table.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;wont-a-timestamp-in-an-unmarked-time-zone-lead-to-future-errors&quot;&gt;Won’t a timestamp in an unmarked time zone lead to future errors?&lt;/h3&gt;

&lt;p&gt;Good forward planning. Yes, a timestamp column in a time zone that’s not UTC will possibly lead to future errors. This is the reasoning behind the general advice &lt;a href=&quot;http://justatheory.com/computers/databases/postgresql/use-timestamptz.html&quot;&gt;always use timestamptz&lt;/a&gt;. There’s no great solution for this, but what we have done is use two column: one timestamptz column as the source of truth, and one indexed timestamp_pst column with the timestamp in PST. That way, we have a canonical source of truth and a column to use in Looker for better performance.&lt;/p&gt;

&lt;h3 id=&quot;note&quot;&gt;Note&lt;/h3&gt;
&lt;p&gt;Our company uses Redshift, so our benchmarks are run against Redshift. There are some differences between MySql/PostgreSQL and Redshift: notably, Redshift doesn’t have indexes and instead sorts rows by columns. Therefore, the exact benchmarks would be different under MySql/Postgres. However, the overall idea should still apply, and so I will use the word “index” to mean “sortkey”.&lt;/p&gt;</content><author><name></name></author><summary type="html">tl;dr: If you’re using Looker and going to be filtering by timestamp/datetimes, definitely use timestamp instead of timestamptz. If you’re going to group by timestamp (ie, group by DATE(timestamp)), then it’s highly recommended the timestamp is stored in the same timezone as the user querying the data. To make sure there is no confusion, add an extra timestamptz column with the time as the source of time truth.</summary></entry></feed>